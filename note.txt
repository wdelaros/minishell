env :
		while (*data.envp)
		{
			ft_printf("%s\n", *data.envp);
			data.envp++;
		}

 $? = exitstatus

 redirection :
 		< doit rediriger l’entrée. :
			fd = open(argv[1], O_RDONLY);
		> doit rediriger la sortie = effacer le contenue et en ajouter un nouveau :
			fd = open(argv[4], O_RDWR | O_TRUNC | O_CREAT, 0644);
			fd = open(argv[4], O_RDWR | O_TRUNC | O_CREAT, S_IRWXU);
		<< doit recevoir un délimiteur et lire l’input donné jusqu’à rencontrer une ligne 
		contenant le délimiteur. Cependant, l’historique n’a pas à être mis à jour ! :
			fd = open(argv[1], ???);
		>> rediriger la sortie en mode append. = rajouter au fichier :
			fd = open(argv[4], O_RDWR | O_APPEND | O_CREAT, 0644);

			if (i == 0) <
			{
				fd = open(argv[1], O_RDONLY);
				dup2(fd, 0);
				close(fd);
			}
			if (i == (argc - 4)) >
			{
				fd = open(argv[argc - 1], O_RDWR | O_TRUNC | O_CREAT, S_IRWXU);
				dup2(fd, 1);
				close(fd);
			}

unset:
		static char	**cpy_environement(char **env, char **cpy_env)
		{
			int	i;

			i = 0;
			env = ft_calloc(ft_x2strlen((const char **)cpy_env) + 1, sizeof(char *));
			if (!env)
				return (NULL);
			while (cpy_env[i])
			{
				env[i] = ft_strdup(cpy_env[i]);
				i++;
			}
			return (env);
		}

		static	char	**reset(t_data *data, char *variable, char **env_cpy)
		{
			int	i;
			int	j;

			i = 0;
			j = 0;
			while (env_cpy[j])
			{
				if (ft_strncmp(variable, env_cpy[j], ft_strlen(variable)))
				{
					data->env[i] = ft_strdup(env_cpy[j]);
					i++;
				}
				j++;
			}
			return (data->env);
		}

		int	ft_unset(t_data *data, char *variable)
		{
			int		i;
			int		len;
			char	**env_cpy;

			i = 0;
			env_cpy = NULL;
			len = ft_x2strlen((const char **)data->env[i]);
			while (data->env[i] && variable)
			{
				if (ft_strncmp(variable, data->env[i], ft_strlen(variable)) == 0)
				{
					env_cpy = cpy_environement(env_cpy, data->env);
					ft_x2free((void **)data->env);
					data->env = ft_calloc(len, sizeof(char *));
					if (!data->env)
						return (FAILURE);
					data->env = reset(data, variable, env_cpy);
					ft_x2free((void **)env_cpy);
					printf("allo\n");
					return (SUCCESS);
				}
				i++;
			}
			return (SUCCESS);
		}